--- portable-file-dialogs.h.orig	2022-11-11 14:41:53.000000000 +0300
+++ portable-file-dialogs.h	2025-01-12 15:47:25.660706100 +0300
@@ -306,7 +306,7 @@
 #if _WIN32
     static int CALLBACK bffcallback(HWND hwnd, UINT uMsg, LPARAM, LPARAM pData);
 #if PFD_HAS_IFILEDIALOG
-    std::string select_folder_vista(IFileDialog *ifd, bool force_path);
+    std::string select_folder_vista(IFileDialog *ifd, bool force_path, HWND hwnd);
 #endif
 
     std::wstring m_wtitle;
@@ -486,7 +486,7 @@
 static inline bool is_directory(std::string const &path)
 {
 #if _WIN32
-    auto attr = GetFileAttributesA(path.c_str());
+    auto attr = GetFileAttributesW(str2wstr(path).c_str());
     return attr != INVALID_FILE_ATTRIBUTES && (attr & FILE_ATTRIBUTE_DIRECTORY);
 #elif __EMSCRIPTEN__
     // TODO
@@ -502,11 +502,11 @@
 static inline std::string getenv(std::string const &str)
 {
 #if _MSC_VER
-    char *buf = nullptr;
+    wchar_t *buf = nullptr;
     size_t size = 0;
-    if (_dupenv_s(&buf, &size, str.c_str()) == 0 && buf)
+    if (_wdupenv_s(&buf, &size, str2wstr(str).c_str()) == 0 && buf)
     {
-        std::string ret(buf);
+        std::string ret(wstr2str(buf));
         free(buf);
         return ret;
     }
@@ -644,15 +644,15 @@
     // Otherwise, try GetUserProfileDirectory()
     HANDLE token = nullptr;
     DWORD len = MAX_PATH;
-    char buf[MAX_PATH] = { '\0' };
+    wchar_t buf[MAX_PATH] = { '\0' };
     if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &token))
     {
         dll userenv("userenv.dll");
-        dll::proc<BOOL WINAPI (HANDLE, LPSTR, LPDWORD)> get_user_profile_directory(userenv, "GetUserProfileDirectoryA");
+        dll::proc<BOOL WINAPI (HANDLE, LPWSTR, LPDWORD)> get_user_profile_directory(userenv, "GetUserProfileDirectoryW");
         get_user_profile_directory(token, buf, &len);
         CloseHandle(token);
         if (*buf)
-            return buf;
+            return internal::wstr2str(buf);
     }
 #elif __EMSCRIPTEN__
     return "/";
@@ -744,14 +744,17 @@
         // Save our thread id so that the caller can cancel us
         m_tid = GetCurrentThreadId();
         EnumWindows(&enum_windows_callback, (LPARAM)this);
+        {
+            std::lock_guard<std::mutex> lock(m_mutex);
+            m_running = true;
+        }
         m_cond.notify_all();
         return fun(&m_exit_code);
     };
 
     std::unique_lock<std::mutex> lock(m_mutex);
     m_future = std::async(std::launch::async, trampoline);
-    m_cond.wait(lock);
-    m_running = true;
+    m_cond.wait(lock, [this]{ return m_running; });
 }
 
 #elif __EMSCRIPTEN__
@@ -1071,8 +1074,9 @@
     }
     filter_list += '\0';
 
+    HWND hwnd = GetActiveWindow();
     m_async->start_func([this, in_type, title, default_path, filter_list,
-                         options](int *exit_code) -> std::string
+                         options, hwnd](int *exit_code) -> std::string
     {
         (void)exit_code;
         m_wtitle = internal::str2wstr(title);
@@ -1098,7 +1102,7 @@
 
                 // In case CoCreateInstance fails (which it should not), try legacy approach
                 if (SUCCEEDED(hr))
-                    return select_folder_vista(ifd, options & opt::force_path);
+                    return select_folder_vista(ifd, options & opt::force_path, hwnd);
             }
 #endif
 
@@ -1132,7 +1136,7 @@
         OPENFILENAMEW ofn;
         memset(&ofn, 0, sizeof(ofn));
         ofn.lStructSize = sizeof(OPENFILENAMEW);
-        ofn.hwndOwner = GetActiveWindow();
+        ofn.hwndOwner = hwnd;
 
         ofn.lpstrFilter = wfilter_list.c_str();
 
@@ -1407,7 +1411,7 @@
 }
 
 #if PFD_HAS_IFILEDIALOG
-inline std::string internal::file_dialog::select_folder_vista(IFileDialog *ifd, bool force_path)
+inline std::string internal::file_dialog::select_folder_vista(IFileDialog *ifd, bool force_path, HWND hwnd)
 {
     std::string result;
 
@@ -1444,7 +1448,7 @@
     ifd->SetOptions(FOS_PICKFOLDERS | FOS_FORCEFILESYSTEM);
     ifd->SetTitle(m_wtitle.c_str());
 
-    hr = ifd->Show(GetActiveWindow());
+    hr = ifd->Show(hwnd);
     if (SUCCEEDED(hr))
     {
         IShellItem* item;
@@ -1628,13 +1632,14 @@
     m_mappings[IDRETRY] = button::retry;
     m_mappings[IDIGNORE] = button::ignore;
 
-    m_async->start_func([text, title, style](int* exit_code) -> std::string
+    HWND hwnd = GetActiveWindow();
+    m_async->start_func([text, title, style, hwnd](int* exit_code) -> std::string
     {
         auto wtext = internal::str2wstr(text);
         auto wtitle = internal::str2wstr(title);
         // Apply new visual style (required for all Windows versions)
         new_style_context ctx;
-        *exit_code = MessageBoxW(GetActiveWindow(), wtext.c_str(), wtitle.c_str(), style);
+        *exit_code = MessageBoxW(hwnd, wtext.c_str(), wtitle.c_str(), style);
         return "";
     });
 
